public List<Account> getAccounts(List<Account> accounts) {
    // code here
    if(accounts == null) return null;
    AccountWrapper[] accList=new List<AccountWrapper>();

    for(Account a:accounts){
        accList.add(new AccountWrapper(a));
    }
    accList.sort();
    accounts.clear();

    for(AccountWrapper a:accList){
    accounts.add(a.account);
    }
    return accounts;
}
// write extra class here 
public class AccountWrapper implements Comparable {

    public Account account;
    
    // Constructor
    public AccountWrapper(Account ac) {
    	// Guard against wrapping a null 
    	if(ac == null) {
    		Exception ex = new NullPointerException();
    		ex.setMessage('Account argument cannot be null'); 
    		throw ex;
    	}
        account = ac;
    }
    
    // Compare accts based on the annual revenue amount.
    public Integer compareTo(Object compareTo) {
        // Cast argument to AccoutWrapper
        AccountWrapper compareToAccty = (AccountWrapper)compareTo;
        
        // The return value of 0 indicates that both elements are equal.
        Integer returnValue = 0;
        if ((account.AnnualRevenue == null) && (compareToAccty.account.AnnualRevenue == null)) {
            // both wrappers have null AnnualRevenue
            returnValue = 0;
        } else if ((account.AnnualRevenue == null) && (compareToAccty.account.AnnualRevenue != null)){
            // nulls-first implementation
            returnValue = -1;
        } else if ((account.AnnualRevenue != null) && (compareToAccty.account.AnnualRevenue == null)){
            // nulls-first implementation
            returnValue = 1;
        } else if (account.AnnualRevenue > compareToAccty.account.AnnualRevenue) {
            // Set return value to a positive value.
            returnValue = 1;
        } else if (account.AnnualRevenue < compareToAccty.account.AnnualRevenue) {
            // Set return value to a negative value.
            returnValue = -1;
        } 
        return returnValue;
    }
}